//You would use forkJoin when you need to wait for multiple HTTP requests or asynchronous operations to complete before taking action.

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { forkJoin, Observable, of, Subject, BehaviorSubject, from } from 'rxjs';
import { delay, concatMap, mergeMap } from 'rxjs/operators';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: [ './app.component.css' ]
})
export class AppComponent  {

  constructor(
    private http: HttpClient
  ) {}


  public results$: BehaviorSubject<Array<any>> = new BehaviorSubject([]);


  startRequests(): void {
    const requests = [
      this.http.get('https://jsonplaceholder.typicode.com/todos/1'),
      this.http.get('https://jsonplaceholder.typicode.com/todos/2'),
      this.http.get('https://jsonplaceholder.typicode.com/todos/3'),
      this.http.get('https://jsonplaceholder.typicode.com/todos/4'),
      this.http.get('https://jsonplaceholder.typicode.com/todos/5'),
      this.http.get('https://jsonplaceholder.typicode.com/todos/6')
    ];


    // from(requests).pipe(    
    //   concatMap((request) => request.pipe(delay(2200)))
    // ).subscribe((res) => {
    //   this.results$.next(this.results$.getValue().concat(res))
    // })

    forkJoin(requests).subscribe((responses) => {
      this.results$.next(responses); // Emit all responses at once when they are all complete
    });
  }
}
